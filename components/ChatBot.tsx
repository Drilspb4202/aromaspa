'use client'

import React, { useState, useEffect, useRef, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { MessageCircle, X, Send, Trash2, ThumbsUp, ThumbsDown, Mail, Loader2 } from 'lucide-react';
import { useToast } from "@/components/ui/use-toast";
import { submitTelegramMessage } from '@/app/actions/telegram';
import { v4 as uuidv4 } from 'uuid';
import { BookingForm, BookingFormData } from './BookingForm';

interface Message {
  id: string;
  text: string;
  isBot: boolean;
  feedback?: 'positive' | 'negative';
  timestamp: number;
}

const services = [
  "–ê—Ä–æ–º–∞–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
  "–ê—Ä–æ–º–∞–ô–æ–≥–∞",
  "–ê—Ä–æ–º–∞–î–µ–≥—É—Å—Ç–∞—Ü–∏—è",
  "–ê—Ä–æ–º–∞–ù–µ–π—Ä–æ–≥—Ä–∞—Ñ–∏–∫–∞",
  "–ê—Ä–æ–º–∞–¢–∏–º–±–∏–ª–¥–∏–Ω–≥",
  "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
  "–•–æ—á—É –≤ –ê—Ä–æ–º–∞–ë–∏–∑–Ω–µ—Å"
];

const systemPrompt = `–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Ä–æ–º–∞—Ç–µ—Ä–∞–ø–∏–∏ –≤ AROMA SPA –°–¢–£–î–ò–Ø. –í–æ—Ç —Ç–≤–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:

1. –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç—ã–º, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∂–∏ —É–º–µ—Ä–µ–Ω–Ω–æ –∏ —É–º–µ—Å—Ç–Ω–æ
- –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º
- –ò–∑–±–µ–≥–∞–π —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∑–º–æ–≤
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–≤–µ–∑–¥–æ—á–∫–∏ (*) –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞

2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤:
- –ù–∞—á–∏–Ω–∞–π —Å –≥–ª–∞–≤–Ω–æ–≥–æ
- –†–∞–∑–±–∏–≤–∞–π –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∞–±–∑–∞—Ü—ã
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π
- –í—ã–¥–µ–ª—è–π –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
- –î–æ–±–∞–≤–ª—è–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã

3. –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å:
- –û–ø–∏—Ä–∞–π—Å—è –Ω–∞ –Ω–∞—É—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ–± –∞—Ä–æ–º–∞—Ç–µ—Ä–∞–ø–∏–∏
- –ü—Ä–∏–≤–æ–¥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –º–∞—Å–µ–ª
- –û–±—ä—è—Å–Ω—è–π –º–µ—Ö–∞–Ω–∏–∑–º—ã –¥–µ–π—Å—Ç–≤–∏—è
- –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –£–ø–æ–º–∏–Ω–∞–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –Ω–æ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º

4. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:
- –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
- –ê–¥–∞–ø—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –ø–æ–¥ –∑–∞–ø—Ä–æ—Å
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
- –ü—Ä–æ—è–≤–ª—è–π —ç–º–ø–∞—Ç–∏—é –∫ –ø—Ä–æ–±–ª–µ–º–∞–º –∫–ª–∏–µ–Ω—Ç–∞
- –ò—Å–ø–æ–ª—å–∑—É–π –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ

5. –ü—Ä–æ–¥–∞–∂–∏ –∏ —Å–µ—Ä–≤–∏—Å:
- –ù–µ–Ω–∞–≤—è–∑—á–∏–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π —É—Å–ª—É–≥–∏ —Å—Ç—É–¥–∏–∏
- –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç—å
- –£–ø–æ–º–∏–Ω–∞–π –∞–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
- –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏

–û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã AROMA SPA –°–¢–£–î–ò–Ø:
- –ê—Ä–æ–º–∞–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: 3000‚ÇΩ, 2 —á–∞—Å–∞
- –ê—Ä–æ–º–∞–ô–æ–≥–∞: 3000‚ÇΩ, 2,5 —á–∞—Å–∞
- –ê—Ä–æ–º–∞–î–µ–≥—É—Å—Ç–∞—Ü–∏—è: 500‚ÇΩ, 1 —á–∞—Å
- –ê—Ä–æ–º–∞–ù–µ–π—Ä–æ–≥—Ä–∞—Ñ–∏–∫–∞: 1000‚ÇΩ, 2 —á–∞—Å–∞
- –ê—Ä–æ–º–∞–¢–∏–º–±–∏–ª–¥–∏–Ω–≥: 5000‚ÇΩ, 2 —á–∞—Å–∞

–ê–¥—Ä–µ—Å: –≥. –°–ü–±, –°–æ–≤–µ—Ç—Å–∫–∏–π –ø—Ä., –¥. 12, –∫–≤/–æ—Ñ. 2 (—Ç–µ—Ä. –£—Å—Ç—å-–°–ª–∞–≤—è–Ω–∫–∞)
–†–∞–±–æ—Ç–∞–µ–º –ø–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏.

–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å "–ö–∞–∫–æ–µ –º–∞—Å–ª–æ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ?":

"–î–ª—è —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ–∏—Ä–Ω—ã—Ö –º–∞—Å–µ–ª:

1. –õ–∞–≤–∞–Ω–¥–∞ ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω –ø–æ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—é! –û–Ω–∞ –ø–æ–º–æ–≥–∞–µ—Ç —É—Å–ø–æ–∫–æ–∏—Ç—å –Ω–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏ —É–ª—É—á—à–∏—Ç—å —Å–æ–Ω.

2. –ë–µ—Ä–≥–∞–º–æ—Ç ‚Äî –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —É–º–µ–Ω—å—à–∞–µ—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å. –û—Å–æ–±–µ–Ω–Ω–æ —Ö–æ—Ä–æ—à –≤ –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è.

3. –ò–ª–∞–Ω–≥-–∏–ª–∞–Ω–≥ ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ.

–î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞—à—É —É—Å–ª—É–≥—É –ê—Ä–æ–º–∞–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (3000‚ÇΩ). –ó–∞ 2 —á–∞—Å–∞ –º—ã –ø–æ–¥–±–µ—Ä–µ–º –∏–¥–µ–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –º–∞—Å–µ–ª –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.

–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ?"`;

const quickReplies = [
  {
    text: "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã",
    icon: "üïí",
  },
  {
    text: "–¶–µ–Ω—ã",
    icon: "üí∞",
  },
  {
    text: "–£—Å–ª—É–≥–∏",
    icon: "üìù",
  },
  {
    text: "–ê–¥—Ä–µ—Å",
    icon: "üìç",
  },
  {
    text: "–≠—Ñ–∏—Ä–Ω—ã–µ –º–∞—Å–ª–∞",
    icon: "üåø",
  },
];

function ChatBot() {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [sessionId] = useState(() => uuidv4());
  const [showBookingForm, setShowBookingForm] = useState(false);
  const [position, setPosition] = useState({ x: 0, y: 0 });
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const chatWindowRef = useRef<HTMLDivElement>(null);
  const chatRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  useEffect(() => {
    const savedMessages = localStorage.getItem('chatMessages');
    if (savedMessages) {
      setMessages(JSON.parse(savedMessages));
    } else {
      setMessages([{
        id: uuidv4(),
        text: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ AROMA SPA –°–¢–£–î–ò–Ø. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?",
        isBot: true,
        timestamp: Date.now()
      }]);
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('chatMessages', JSON.stringify(messages));
  }, [messages]);

  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isOpen]);

  const getBotResponse = async (userInput: string): Promise<string> => {
    try {
      const shortContext = `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Ä–æ–º–∞—Ç–µ—Ä–∞–ø–∏–∏ –≤ AROMA SPA –°–¢–£–î–ò–Ø. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (–¥–æ 100 —Å–ª–æ–≤), –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∂–∏ —É–º–µ—Ä–µ–Ω–Ω–æ.

–£—Å–ª—É–≥–∏:
- –ê—Ä–æ–º–∞–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: 3000‚ÇΩ, 2—á
- –ê—Ä–æ–º–∞–ô–æ–≥–∞: 3000‚ÇΩ, 2.5—á
- –ê—Ä–æ–º–∞–î–µ–≥—É—Å—Ç–∞—Ü–∏—è: 500‚ÇΩ, 1—á
- –ê—Ä–æ–º–∞–ù–µ–π—Ä–æ–≥—Ä–∞—Ñ–∏–∫–∞: 1000‚ÇΩ, 2—á
- –ê—Ä–æ–º–∞–¢–∏–º–±–∏–ª–¥–∏–Ω–≥: 5000‚ÇΩ, 2—á

–ê–¥—Ä–µ—Å: –°–ü–±, –°–æ–≤–µ—Ç—Å–∫–∏–π –ø—Ä., 12`;

      const response = await fetch('/api/deepseek', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: userInput,
          sessionId,
          context: shortContext
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || 'Unknown error occurred');
      }

      return data.result;
    } catch (error) {
      console.error('Error getting AI response:', error);
      return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.";
    }
  };

  const handleSend = useCallback(async () => {
    if (input.trim()) {
      const userMessage = input.trim();
      const userMessageId = uuidv4();
      
      setMessages(prev => [...prev, {
        id: userMessageId,
        text: userMessage,
        isBot: false,
        timestamp: Date.now()
      }]);
      
      setInput('');
      setIsTyping(true);

      try {
        if (services.includes(userMessage)) {
          const message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —É—Å–ª—É–≥—É: ${userMessage}`;
          await submitTelegramMessage(message);
          setMessages(prev => [...prev, {
            id: uuidv4(),
            text: "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            isBot: true,
            timestamp: Date.now()
          }]);
        } else {
          const response = await getBotResponse(userMessage);
          setMessages(prev => [...prev, {
            id: uuidv4(),
            text: response,
            isBot: true,
            timestamp: Date.now()
          }]);
        }
      } catch (error) {
        console.error('Error getting bot response:', error);
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
          variant: "destructive",
        });
      } finally {
        setIsTyping(false);
      }
    }
  }, [input, toast, services, submitTelegramMessage, getBotResponse]);

  const handleQuickReply = useCallback(async (reply: string) => {
    if (reply === "–£—Å–ª—É–≥–∏") {
      setShowBookingForm(true);
      return;
    }

    const replyId = uuidv4();
    setMessages(prev => [...prev, {
      id: replyId,
      text: reply,
      isBot: false,
      timestamp: Date.now()
    }]);
    
    setIsTyping(true);
    
    try {
      if (reply === "–ê–¥—Ä–µ—Å") {
        const addressMessage = `üìç –ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏:
–≥. –°–ü–±, –°–æ–≤–µ—Ç—Å–∫–∏–π –ø—Ä., –¥. 12, –∫–≤/–æ—Ñ. 2 (—Ç–µ—Ä. –£—Å—Ç—å-–°–ª–∞–≤—è–Ω–∫–∞)

üó∫Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è:
‚Ä¢ 2GIS: https://2gis.ru/spb/geo/70000001101166106
‚Ä¢ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã: https://yandex.ru/navi/org/aroma_spa/35632460140

–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏. –ó–≤–æ–Ω–∏—Ç–µ +7 995 6000 12 2`;
        
        setMessages(prev => [...prev, {
          id: uuidv4(),
          text: addressMessage,
          isBot: true,
          timestamp: Date.now()
        }]);
      } else if (services.includes(reply)) {
        const message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —É—Å–ª—É–≥—É: ${reply}`;
        await submitTelegramMessage(message);
        setMessages(prev => [...prev, {
          id: uuidv4(),
          text: "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
          isBot: true,
          timestamp: Date.now()
        }]);
      } else {
        const response = await getBotResponse(reply);
        setMessages(prev => [...prev, {
          id: uuidv4(),
          text: response,
          isBot: true,
          timestamp: Date.now()
        }]);
      }
    } catch (error) {
      console.error('Error handling quick reply:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        variant: "destructive",
      });
    } finally {
      setIsTyping(false);
    }
  }, [toast, services, submitTelegramMessage, getBotResponse]);

  const clearChat = useCallback(() => {
    setMessages([{
      id: uuidv4(),
      text: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ AROMA SPA –°–¢–£–î–ò–Ø. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?",
      isBot: true,
      timestamp: Date.now()
    }]);
    localStorage.removeItem('chatMessages');
  }, []);

  const handleFeedback = useCallback(async (messageId: string, type: 'positive' | 'negative') => {
    setMessages(prev => 
      prev.map(msg => 
        msg.id === messageId ? { ...msg, feedback: type } : msg
      )
    );

    try {
      await fetch('/api/deepseek', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          sessionId,
          feedback: type,
        })
      });
    } catch (error) {
      console.error('Error sending feedback:', error);
    }

    toast({
      title: type === 'positive' ? "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤!" : "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤",
      description: type === 'positive' ? "–ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Å–º–æ–≥–ª–∏ –ø–æ–º–æ—á—å!" : "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —É–ª—É—á—à–∏—Ç—å –Ω–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.",
    });
  }, [toast, sessionId]);

  const emailTranscript = useCallback(() => {
    const transcript = messages
      .map(msg => `${msg.isBot ? '–ë–æ—Ç' : '–í—ã'}: ${msg.text}`)
      .join('\n');
    const mailtoLink = `mailto:?subject=–ß–∞—Ç —Å AROMA SPA –°–¢–£–î–ò–Ø&body=${encodeURIComponent(transcript)}`;
    window.open(mailtoLink, '_blank');
  }, [messages]);

  const handleBookingSubmit = useCallback(async (formData: BookingFormData) => {
    setShowBookingForm(false);
    setIsTyping(true);

    try {
      const message = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å:
–ò–º—è: ${formData.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
–£—Å–ª—É–≥–∞: ${formData.service}
–î–∞—Ç–∞: ${formData.date}`;

      await submitTelegramMessage(message);

      setMessages(prev => [...prev, {
        id: uuidv4(),
        text: "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.",
        isBot: true,
        timestamp: Date.now()
      }]);
    } catch (error) {
      console.error('Error submitting booking:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        variant: "destructive",
      });
    } finally {
      setIsTyping(false);
    }
  }, [toast]);


  const messageVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
  };


  return (
    <>
      <Button
        onClick={() => setIsOpen(true)}
        className="fixed z-[60] rounded-full bg-gradient-to-r from-violet-600 via-purple-600 to-fuchsia-600 hover:from-violet-700 hover:via-purple-700 hover:to-fuchsia-700 text-white p-4 shadow-2xl transition-all duration-300 hover:scale-110 bottom-20 right-4 md:bottom-4 ring-2 ring-white/20 hover:ring-white/40"
        aria-label="–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç"
      >
        <MessageCircle size={24} />
      </Button>
      <AnimatePresence>
        {isOpen && (
          <motion.div
            ref={chatRef}
            className="fixed bottom-4 right-4 z-[60] bg-black/30 backdrop-blur-md md:bottom-20 md:right-4 rounded-3xl overflow-hidden"
            initial={{ opacity: 0, y: 50, x: 20, scale: 0.9, rotateX: 15 }}
            animate={{ opacity: 1, y: 0, x: 0, scale: 1, rotateX: 0 }}
            exit={{ opacity: 0, y: 50, x: 20, scale: 0.9, rotateX: 15 }}
            transition={{ type: "spring", duration: 0.6, bounce: 0.3 }}
          >
            <div className="relative w-[calc(100vw-2rem)] h-[calc(100vh-8rem)] md:w-96 md:h-[32rem] max-h-[32rem] bg-gradient-to-br from-violet-600 via-purple-600 to-fuchsia-600 rounded-3xl shadow-2xl overflow-hidden flex flex-col border border-white/20">
              <div className="p-5 flex justify-between items-center bg-gradient-to-r from-violet-800/50 to-fuchsia-800/50 backdrop-blur-sm border-b border-white/20 shadow-lg">
                <div className="flex items-center space-x-3">
                  <div className="relative">
                    <div className="absolute inset-0 bg-white/20 rounded-full animate-pulse"></div>
                    <div className="relative bg-white/10 rounded-full p-2">
                      <MessageCircle className="w-5 h-5 text-white" />
                    </div>
                  </div>
                  <h3 className="text-xl font-bold bg-gradient-to-r from-white to-purple-100 bg-clip-text text-transparent drop-shadow-lg">AROMA SPA –°–¢–£–î–ò–Ø</h3>
                </div>
                <div className="flex items-center space-x-1">
                  <Button
                    onClick={clearChat}
                    variant="ghost"
                    size="icon"
                    className="text-white/70 hover:text-white hover:bg-white/20 rounded-xl transition-all duration-200 hover:scale-110"
                    title="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
                  >
                    <Trash2 size={18} />
                  </Button>
                  <Button
                    onClick={emailTranscript}
                    variant="ghost"
                    size="icon"
                    className="text-white/70 hover:text-white hover:bg-white/20 rounded-xl transition-all duration-200 hover:scale-110"
                    title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ email"
                  >
                    <Mail size={18} />
                  </Button>
                  <Button
                    onClick={() => setIsOpen(false)}
                    variant="ghost"
                    size="icon"
                    className="text-white/70 hover:text-white hover:bg-white/20 rounded-xl transition-all duration-200 hover:scale-110"
                  >
                    <X size={18} />
                  </Button>
                </div>
              </div>

                <div className="flex-1 overflow-y-auto p-5 space-y-4 bg-gradient-to-b from-transparent via-purple-500/5 to-transparent backdrop-blur-sm">
                  {messages.map((message) => (
                    <motion.div
                      key={message.id}
                      variants={messageVariants}
                      initial="hidden"
                      animate="visible"
                      className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}
                    >
                      <div
                        className={`max-w-[80%] rounded-2xl px-4 py-3 shadow-lg transition-all duration-200 hover:scale-[1.02] ${
                          message.isBot
                            ? 'bg-white/15 backdrop-blur-md text-white border border-white/20'
                            : 'bg-white text-purple-900 border border-white/30 shadow-xl'
                        }`}
                      >
                        <div className="text-sm leading-relaxed">{message.text}</div>
                        {message.isBot && !message.feedback && (
                          <div className="mt-3 flex space-x-2">
                            <Button
                              onClick={() => handleFeedback(message.id, 'positive')}
                              variant="ghost"
                              size="sm"
                              className="text-white/60 hover:text-green-400 hover:bg-white/20 rounded-xl transition-all duration-200 hover:scale-110"
                            >
                              <ThumbsUp size={14} />
                            </Button>
                            <Button
                              onClick={() => handleFeedback(message.id, 'negative')}
                              variant="ghost"
                              size="sm"
                              className="text-white/60 hover:text-red-400 hover:bg-white/20 rounded-xl transition-all duration-200 hover:scale-110"
                            >
                              <ThumbsDown size={14} />
                            </Button>
                          </div>
                        )}
                      </div>
                    </motion.div>
                  ))}
                  {isTyping && (
                    <motion.div
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      className="flex justify-start"
                    >
                      <div className="bg-white/15 backdrop-blur-md rounded-2xl px-4 py-3 border border-white/20">
                        <Loader2 className="w-5 h-5 animate-spin text-white" />
                      </div>
                    </motion.div>
                  )}
                  <div ref={messagesEndRef} />
                </div>
                {showBookingForm && (
                  <div className="absolute inset-0 bg-black/80 backdrop-blur-md z-10 flex items-center justify-center">
                    <BookingForm
                      onSubmit={handleBookingSubmit}
                      onClose={() => setShowBookingForm(false)}
                    />
                  </div>
                )}
                <div className="p-5 space-y-4 bg-gradient-to-t from-violet-700/30 via-purple-600/30 to-fuchsia-700/30 backdrop-blur-sm border-t border-white/20">
                  <div className="flex space-x-3">
                    <Input
                      ref={inputRef}
                      type="text"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                      value={input}
                      onChange={(e) => setInput(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && handleSend()}
                      className="flex-1 bg-white/15 backdrop-blur-md border-white/30 text-white placeholder-white/60 focus:border-white focus:ring-2 focus:ring-white/50 shadow-lg rounded-xl"
                    />
                    <Button
                      onClick={handleSend}
                      className="bg-white text-violet-700 hover:bg-white/90 shadow-lg rounded-xl px-6 hover:scale-105 transition-all duration-200 font-semibold"
                    >
                      <Send size={18} />
                    </Button>
                  </div>

                  <div className="flex flex-wrap gap-2">
                    {quickReplies.map((reply, index) => (
                      <Button
                        key={index}
                        onClick={() => handleQuickReply(reply.text)}
                        variant="outline"
                        className="bg-white/10 backdrop-blur-md border-white/20 text-white hover:bg-white/20 hover:scale-105 transition-all duration-200 rounded-xl shadow-md hover:shadow-lg"
                        size="sm"
                      >
                        <span className="mr-1.5 text-base">{reply.icon}</span>
                        {reply.text}
                      </Button>
                    ))}
                  </div>
                </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}

export default ChatBot;
